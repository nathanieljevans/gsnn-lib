'''

exp1 lincs genes: 
O00180 O00206 O00214 O00233 O00273 O00429 O00762 O14503 O14508 O14526 O14672 O14746 O14757 O14817 O14920 O14929 O14936 O14965 O15234 O15264 O15327 O15392 O15440 O15503 O43303 O43399 O43463 O43502 O43524 O43617 O43657 O43852 O60238 O60239 O60568 O60637 O60701 O60716 O60858 O60936 O75084 O75131 O75293 O75319 O75419 O75475 O75496 O75509 O75530 O75592 O75608 O75629 O75828 O75832 O76024 O76075 O94782 O94804 O95067 O95084 O95208 O95238 O95456 O95817 O95819 O96013 O96017 O96020 P00491 P00519 P00533 P01100 P01106 P01111 P01133 P01584 P01903 P02452 P02462 P02649 P03956 P04035 P04040 P04075 P04085 P04150 P04626 P04637 P04792 P04843 P04899 P05026 P05067 P05121 P05305 P05362 P05412 P05549 P06241 P06400 P06493 P07339 P07711 P07948 P08069 P08253 P08575 P09493 P09601 P09874 P0DMV9 P0DP25 P10070 P10244 P10415 P10451 P10586 P10600 P10721 P10809 P10912 P11233 P11388 P11717 P11802 P12004 P12644 P12931 P13489 P13500 P14174 P14635 P14921 P15407 P15941 P16035 P16070 P16220 P16949 P17181 P17858 P17861 P17936 P18031 P18084 P18146 P18846 P18850 P18858 P19367 P19526 P19875 P20073 P20226 P20248 P20719 P20810 P20936 P21291 P21731 P21796 P21802 P21860 P22061 P22307 P23769 P23771 P24385 P24522 P24723 P24844 P24941 P25205 P25445 P25942 P25963 P26358 P26651 P27694 P28799 P29323 P29353 P29474 P30281 P30304 P30305 P31146 P31153 P31260 P31749 P31947 P32321 P34932 P35052 P35250 P35354 P36871 P37173 P37231 P37840 P38398 P38571 P38936 P40763 P41002 P41220 P42224 P42336 P42574 P42575 P43007 P43405 P45877 P45984 P46108 P46109 P46527 P46531 P46695 P46940 P47712 P47736 P48431 P48552 P48729 P49023 P49247 P49281 P49459 P49588 P49715 P49716 P50549 P50613 P51159 P51532 P51692 P52701 P52739 P52926 P53004 P53350 P53396 P53803 P54578 P55210 P55957 P56211 P56282 P56559 P60880 P60953 P61073 P61586 P62380 P62952 P63096 P78382 P78396 P78552 P84022 P98177 Q00534 Q00610 Q00653 Q01201 Q01826 Q02338 Q02363 Q03181 Q04724 Q04941 Q05193 Q05209 Q05397 Q05655 Q06187 Q06413 Q06710 Q06945 Q07157 Q07812 Q08257 Q08345 Q12888 Q12894 Q12967 Q12968 Q12983 Q13009 Q13115 Q13145 Q13153 Q13191 Q13283 Q13322 Q13330 Q13395 Q13418 Q13422 Q13490 Q13501 Q13526 Q13541 Q13625 Q13636 Q13794 Q13813 Q13867 Q14011 Q14135 Q14145 Q14164 Q14165 Q14192 Q14209 Q14244 Q14289 Q14457 Q14469 Q14517 Q14667 Q14683 Q14684 Q14865 Q14934 Q14978 Q15011 Q15022 Q15025 Q15078 Q15172 Q15262 Q15382 Q15386 Q15418 Q15653 Q15717 Q15746 Q15910 Q16236 Q16394 Q16537 Q16563 Q16623 Q16649 Q16665 Q16822 Q16828 Q16836 Q29RF7 Q4LE39 Q56P03 Q5EB52 Q5T7M9 Q5VZF2 Q5XG87 Q6FI81 Q7L804 Q7Z628 Q7Z698 Q86X29 Q86XK2 Q8IUC6 Q8IVU3 Q8N3C0 Q8N3F8 Q8N3Z3 Q8N726 Q8NDC0 Q8NDH3 Q8NEB9 Q8TBR7 Q8WTV0 Q8WU20 Q8WUA8 Q8WXH0 Q8WYB5 Q92466 Q92569 Q92611 Q92769 Q92851 Q92934 Q92974 Q93009 Q93100 Q96DN5 Q96ED9 Q96EH5 Q96GD4 Q96KQ4 Q96RU7 Q96RU8 Q96TA2 Q99417 Q99570 Q99576 Q99653 Q99661 Q99766 Q9BPW8 Q9BUF5 Q9BVC6 Q9BWU1 Q9BXL8 Q9C040 Q9H3P7 Q9H5J4 Q9H8N7 Q9HD45 Q9HD67 Q9NQC1 Q9NR56 Q9NRC1 Q9NRW4 Q9NRY6 Q9NSB8 Q9NT62 Q9NVQ4 Q9NW15 Q9NX09 Q9UBN7 Q9UBW7 Q9UDY8 Q9UER7 Q9UGJ0 Q9UGL1 Q9UHN6 Q9UI08 Q9UJP4 Q9UKW4 Q9UL25 Q9ULJ6 Q9UNE7 Q9UNS1 Q9UP38 Q9UPN3 Q9UPT9 Q9UPW0 Q9UPY6 Q9Y222 Q9Y315 Q9Y376 Q9Y4C1 Q9Y4L1 Q9Y696 Q9Y6K1 Q9Y6M1 Q9Y6P5 Q9Y6Q9 Q9Y6R4

exp1 breast cell lines:  
BT20 BT474 HS578T MCF7 MDAMB231 MDAMB468 SKBR3 T47D ZR751

exp1 inhibitors: 


python make_data2.py --data ../../data/ --out ../processed_data/ \
--lines BT20 BT474 HS578T MCF7 MDAMB231 MDAMB468 SKBR3 T47D ZR751 \
--lincs O00180 O00206 O00214 O00233 O00273 O00429 O00762 O14503 O14508 O14526 O14672 O14746 O14757 O14817 O14920 O14929 O14936 O14965 O15234 O15264 O15327 O15392 O15440 O15503 O43303 O43399 O43463 O43502 O43524 O43617 O43657 O43852 O60238 O60239 O60568 O60637 O60701 O60716 O60858 O60936 O75084 O75131 O75293 O75319 O75419 O75475 O75496 O75509 O75530 O75592 O75608 O75629 O75828 O75832 O76024 O76075 O94782 O94804 O95067 O95084 O95208 O95238 O95456 O95817 O95819 O96013 O96017 O96020 P00491 P00519 P00533 P01100 P01106 P01111 P01133 P01584 P01903 P02452 P02462 P02649 P03956 P04035 P04040 P04075 P04085 P04150 P04626 P04637 P04792 P04843 P04899 P05026 P05067 P05121 P05305 P05362 P05412 P05549 P06241 P06400 P06493 P07339 P07711 P07948 P08069 P08253 P08575 P09493 P09601 P09874 P0DMV9 P0DP25 P10070 P10244 P10415 P10451 P10586 P10600 P10721 P10809 P10912 P11233 P11388 P11717 P11802 P12004 P12644 P12931 P13489 P13500 P14174 P14635 P14921 P15407 P15941 P16035 P16070 P16220 P16949 P17181 P17858 P17861 P17936 P18031 P18084 P18146 P18846 P18850 P18858 P19367 P19526 P19875 P20073 P20226 P20248 P20719 P20810 P20936 P21291 P21731 P21796 P21802 P21860 P22061 P22307 P23769 P23771 P24385 P24522 P24723 P24844 P24941 P25205 P25445 P25942 P25963 P26358 P26651 P27694 P28799 P29323 P29353 P29474 P30281 P30304 P30305 P31146 P31153 P31260 P31749 P31947 P32321 P34932 P35052 P35250 P35354 P36871 P37173 P37231 P37840 P38398 P38571 P38936 P40763 P41002 P41220 P42224 P42336 P42574 P42575 P43007 P43405 P45877 P45984 P46108 P46109 P46527 P46531 P46695 P46940 P47712 P47736 P48431 P48552 P48729 P49023 P49247 P49281 P49459 P49588 P49715 P49716 P50549 P50613 P51159 P51532 P51692 P52701 P52739 P52926 P53004 P53350 P53396 P53803 P54578 P55210 P55957 P56211 P56282 P56559 P60880 P60953 P61073 P61586 P62380 P62952 P63096 P78382 P78396 P78552 P84022 P98177 Q00534 Q00610 Q00653 Q01201 Q01826 Q02338 Q02363 Q03181 Q04724 Q04941 Q05193 Q05209 Q05397 Q05655 Q06187 Q06413 Q06710 Q06945 Q07157 Q07812 Q08257 Q08345 Q12888 Q12894 Q12967 Q12968 Q12983 Q13009 Q13115 Q13145 Q13153 Q13191 Q13283 Q13322 Q13330 Q13395 Q13418 Q13422 Q13490 Q13501 Q13526 Q13541 Q13625 Q13636 Q13794 Q13813 Q13867 Q14011 Q14135 Q14145 Q14164 Q14165 Q14192 Q14209 Q14244 Q14289 Q14457 Q14469 Q14517 Q14667 Q14683 Q14684 Q14865 Q14934 Q14978 Q15011 Q15022 Q15025 Q15078 Q15172 Q15262 Q15382 Q15386 Q15418 Q15653 Q15717 Q15746 Q15910 Q16236 Q16394 Q16537 Q16563 Q16623 Q16649 Q16665 Q16822 Q16828 Q16836 Q29RF7 Q4LE39 Q56P03 Q5EB52 Q5T7M9 Q5VZF2 Q5XG87 Q6FI81 Q7L804 Q7Z628 Q7Z698 Q86X29 Q86XK2 Q8IUC6 Q8IVU3 Q8N3C0 Q8N3F8 Q8N3Z3 Q8N726 Q8NDC0 Q8NDH3 Q8NEB9 Q8TBR7 Q8WTV0 Q8WU20 Q8WUA8 Q8WXH0 Q8WYB5 Q92466 Q92569 Q92611 Q92769 Q92851 Q92934 Q92974 Q93009 Q93100 Q96DN5 Q96ED9 Q96EH5 Q96GD4 Q96KQ4 Q96RU7 Q96RU8 Q96TA2 Q99417 Q99570 Q99576 Q99653 Q99661 Q99766 Q9BPW8 Q9BUF5 Q9BVC6 Q9BWU1 Q9BXL8 Q9C040 Q9H3P7 Q9H5J4 Q9H8N7 Q9HD45 Q9HD67 Q9NQC1 Q9NR56 Q9NRC1 Q9NRW4 Q9NRY6 Q9NSB8 Q9NT62 Q9NVQ4 Q9NW15 Q9NX09 Q9UBN7 Q9UBW7 Q9UDY8 Q9UER7 Q9UGJ0 Q9UGL1 Q9UHN6 Q9UI08 Q9UJP4 Q9UKW4 Q9UL25 Q9ULJ6 Q9UNE7 Q9UNS1 Q9UP38 Q9UPN3 Q9UPT9 Q9UPW0 Q9UPY6 Q9Y222 Q9Y315 Q9Y376 Q9Y4C1 Q9Y4L1 Q9Y696 Q9Y6K1 Q9Y6M1 Q9Y6P5 Q9Y6Q9 Q9Y6R4 \
--drugs

### 

TP53 (uniprot)
P04637

python make_data2.py --data ../../data/ --out ../processed_data/ --lines BT20 BT474 HS578T MCF7 MDAMB231 MDAMB468 SKBR3 T47D ZR751 --lincs P04637 --drugs

## make it smaller to test reinforcement learning 
python make_data2.py --data ../../data/ --out ../processed_data/ --lines MCF7 MDAMB231 --lincs P04637 --drugs BRD-K60230970 BRD-K50691590 BRD-K49865102 BRD-K81418486 BRD-K68065987

# single drug, all cell lines, predict TP53 , only expr omics 
# BRD-K60230970 - proteasome inhibitor 
python make_data2.py --data ../../data/ --out ../processed_data/ --lincs P04637 --drugs BRD-K60230970 --omics expr 

# all data 

python make_data2.py --data ../../data/ --out ../data/all/ --dti_sources clue targetome --omics expr mut 


'''
import argparse 
import os 
import pandas as pd
import omnipath as op
import torch_geometric as pyg
import numpy as np
import torch
import h5py
import networkx as nx
import functools
from collections import deque
import copy
import time
import shutil 

from gsnn.proc.load_methyl import load_methyl
from gsnn.proc.load_expr import load_expr
from gsnn.proc.load_cnv import load_cnv
from gsnn.proc.load_mut import load_mut
from gsnn.proc.utils import get_x_drug_conc, load_prism
from gsnn.proc.subset import subset_graph


### GLOBAL CONFIGS ### 
__DOSE_EPS__ = 1e-6

def get_args(): 
    parser = argparse.ArgumentParser()

    parser.add_argument("--data",               type=str,               default='../../data/',                      help="path to data directory")
    parser.add_argument("--out",                type=str,               default='../processed_data/',               help="path to data directory")
    parser.add_argument("--extdata",            type=str,               default='../extdata/',                      help="path to data directory")
    parser.add_argument('--feature_space',      nargs='+',              default=['landmark'],                       help='lincs feature space [landmark, best-inferred, inferred]')
    parser.add_argument('--dti_sources',        nargs='+',              default=['clue', 'targetome'],              help='the databases to use for drug target prior knowledge [clue, stitch, targetome]')
    parser.add_argument('--drugs',              nargs='+',              default=['none'],                           help='list of drugs to include in the graph')
    parser.add_argument('--lines',              nargs='+',              default=['none'],                           help='list of cell lines to include in the graph')
    parser.add_argument('--lincs',              nargs='+',              default=['none'],                           help='list of lincs genes to include in the graph')
    parser.add_argument('--omics',              nargs='+',              default=['mut', 'methyl', 'expr', 'cnv'],   help='list of lincs genes to include in the graph')
    parser.add_argument('--omics_q_filter',     type=float,             default=0.1,                                help='the bottom q quantile to remove features')
    parser.add_argument("--time",               type=float,             default=24.,                                help="the time point to predict expression changes for")
    parser.add_argument("--filter_depth",       type=int,               default=10,                                 help="the depth to search for upstream drugs and downstream lincs in the node filter process")
    parser.add_argument("--min_obs_per_drug",   type=int,               default=250,                                help="if `--drugs` is None, then this will be the minimum number of obs to be included as drug candidate")
    parser.add_argument("--undirected",         action='store_true',    default=False,                              help="make all function edges undirected")
    parser.add_argument("--create_subgraphs",   action='store_true',    default=False,                              help="create subgraphs for each drug")
    args = parser.parse_args() 

    if args.drugs[0] == 'none': args.drugs = None
    if args.lines[0] == 'none': args.lines = None
    if args.lincs[0] == 'none': args.lincs = None
    
    for f in args.feature_space: 
        if f not in ['landmark', 'best-inferred', 'inferred']: 
            raise ValueError(f'unrecognized feature space value: {f} [expects one of: landmark, best-inferred, inferred]')
        
    for f in args.omics: 
        if f not in ['mut', 'methyl', 'expr', 'cnv']: 
            raise ValueError(f'unrecognized omic')

    args.feature_space = [x.replace('-', ' ') for x in args.feature_space]

    return args 

def get_geneid2uniprot(args): 
    uni2id = pd.read_csv(f'{args.extdata}/omnipath_uniprot2geneid.tsv', sep='\t').rename({'From':'uniprot', 'To':'gene_id'}, axis=1)
    uni2symb = pd.read_csv(f'{args.extdata}/omnipath_uniprot2genesymb.tsv', sep='\t').rename({'From':'uniprot', 'To':'gene_symbol'}, axis=1)
    gene_map = uni2id.merge(uni2symb, on='uniprot', how='outer')
    geneinfo = pd.read_csv(f'{args.data}/geneinfo_beta.txt', sep='\t')[lambda x: x.feature_space.isin(args.feature_space)].merge(gene_map, on=['gene_id'], how='left')
    geneinfo = geneinfo[['gene_id', 'uniprot']].drop_duplicates().dropna()
    if args.lincs is not None: 
        lincs2uniprot = geneinfo[lambda x: x.uniprot.isin(args.lincs)].set_index('gene_id')['uniprot'].drop_duplicates().to_dict()
    else: 
        lincs2uniprot = geneinfo.set_index('gene_id')['uniprot'].drop_duplicates().to_dict()
    
    return lincs2uniprot


def build_nx(func_df, targets, lincs): 
    G = nx.DiGraph()

    # function -> function 
    for i,edge in func_df.iterrows(): 
        G.add_edge(edge.source, edge.target)

    # drug -> function
    for i,edge in targets.iterrows(): 
        if ('PROTEIN__' + edge.target) in G: 
            G.add_edge('DRUG__' + edge.pert_id, 'PROTEIN__' + edge.target)
        else: 
            print(f'warning: {edge.target} is not present in graph, this DTI will not be added.')

    # function -> output edges
    #ii = 0
    for linc in lincs: 
        # add the edge even if the RNA doesn't exist; will get filtered in next step
        G.add_edge('RNA__' + linc, 'LINCS__' + linc)
        #if ('RNA__' + linc) in G: 
        #    G.add_edge('RNA__' + linc, 'LINCS__' + linc)
        #else: 
        #    ii+=1 
        #    #print(f'warning: {linc} does not have a respective RNA node. This lincs will be filtered.')
    #print(f'number of lincs outputs without a respective RNA node: {ii}/{len(lincs)}')

    return G

def filter_func_nodes(args, func_names, func_df, targets, lincs, drugs): 
    print('filtering function nodes...')
    G = build_nx(func_df, targets, lincs)
    
    subgraph = subset_graph(G, args.filter_depth, roots=['DRUG__' + x for x in args.drugs], leafs=['LINCS__' + x for x in args.lincs], verbose=True)
    nodes = list(subgraph.nodes())

    func_mask = np.array([n in nodes for n in func_names])
    drug_mask = np.array([('DRUG__' + n) in nodes for n in drugs])
    linc_mask = np.array([('LINCS__' + n) in nodes for n in lincs])

    print(f'function nodes retained: {(1.*func_mask).sum()}/{len(func_mask)}')
    print(f'drug nodes retained: {(1.*drug_mask).sum()}/{len(drug_mask)}')
    print(f'lincs nodes retained: {(1.*linc_mask).sum()}/{len(linc_mask)}')

    func_names = np.array(func_names)[func_mask].tolist()
    drugs = np.array(drugs)[drug_mask].tolist() 
    lincs = np.array(lincs)[linc_mask].tolist()

    func_df = func_df[lambda x: x.source.isin(func_names) & (x.target.isin(func_names))]
    targets = targets[lambda x: x.target_name.isin(func_names)]

    return func_names, func_df, targets, drugs, lincs

def get_drug_subgraphs(args, input_names, func_names, output_names, func_df, targets): 
    '''
    NOTE: using subgraphs isn't identical to using the full graph since some omic nodes may be omitted that can play a role.
    '''

    print('computing drug-specific subgraphs...')
    G = build_nx(func_df, targets, args.lincs)

    omic_nodes = [x for x in input_names if 'DRUG__' not in x]

    subgraph_dict = {}
    distance_dicts = ({}, {})
    for i, drug in enumerate(args.drugs): 
        print(f'progress: {i}/{len(args.drugs)}', end='\r')
        subgraph, distance_dicts = subset_graph(G, args.filter_depth, roots=['DRUG__' + drug], leafs=['LINCS__' + x for x in args.lincs], verbose=False, distance_dicts=distance_dicts, return_dicts=True)
        inp2idx = {node:i for i,node in enumerate(input_names)}
        fun2idx = {node:i for i,node in enumerate(func_names)}
        out2idx = {node:i for i,node in enumerate(output_names)}

        keep_omics = []
        for omic in omic_nodes: 
            typ, uni = omic.split('__')
            if (('RNA__' + uni) in subgraph) or (('PROTEIN__' + uni) in subgraph): 
                keep_omics.append(omic)
        
        subgraph_dict['DRUG__' + drug] = (torch.tensor([inp2idx[x] for x in input_names if x in subgraph] + [inp2idx[x] for x in keep_omics], dtype=torch.long),
                                          torch.tensor([fun2idx[x] for x in func_names if x in subgraph], dtype=torch.long),
                                          torch.tensor([out2idx[x] for x in output_names if x in subgraph], dtype=torch.long))
    return subgraph_dict


if __name__ == '__main__': 

    args = get_args()
    print()

    if not os.path.exists(args.out): 
        print('making output directory...')
        os.makedirs(args.out, exist_ok=True)

    with open(f'{args.out}/args.log', 'w') as f: 
        f.write(str(args))

    dorothea        = op.interactions.Dorothea().get()
    omnipath        = op.interactions.OmniPath().get()
    pathways_extra  = op.interactions.PathwayExtra().get()
    tf_mirna        = op.interactions.TFmiRNA().get()
    mirna           = op.interactions.miRNA().get()

    doro = dorothea.assign(source = lambda x: ['PROTEIN__' + y for y in x.source],
                        target = lambda x: ['RNA__' + y for y in x.target], 
                        edge_type = 'dorothea')[['source', 'target', 'edge_type']]

    omni = omnipath.assign(source = lambda x: ['PROTEIN__' + y for y in x.source],
                        target = lambda x: ['PROTEIN__' + y for y in x.target], 
                        edge_type = 'omnipath')[['source', 'target', 'edge_type']]

    path = pathways_extra.assign(source = lambda x: ['PROTEIN__' + y for y in x.source],
                        target = lambda x: ['PROTEIN__' + y for y in x.target], 
                        edge_type = 'pathways_extra')[['source', 'target', 'edge_type']]     

    tfmirna = tf_mirna.assign(source = lambda x: ['PROTEIN__' + y for y in x.source],
                        target = lambda x: ['RNA__' + y for y in x.target], 
                        edge_type = 'tf_mirna')[['source', 'target', 'edge_type']]

    mirna_ = mirna.assign(source = lambda x: ['RNA__' + y for y in x.source],
                        target = lambda x: ['RNA__' + y for y in x.target], 
                        edge_type = 'mirna')[['source', 'target', 'edge_type']] 
    
    _fdf = pd.concat((doro, omni, path, tfmirna, mirna_), axis=0, ignore_index=True)
    _fnames = _fdf.source.values.tolist() + _fdf.target.values.tolist()
    rna_space = [x.split('__')[1] for x in _fnames if x.split('__')[0] == 'RNA']
    protein_space = [x.split('__')[1] for x in _fnames if x.split('__')[0] == 'PROTEIN']
    RNA_PROT_OVERLAP = list(set(rna_space).intersection(set(protein_space)))
    trans = pd.DataFrame({'source': ['RNA__' + x for x in RNA_PROT_OVERLAP],
                        'target': ['PROTEIN__' + x for x in RNA_PROT_OVERLAP],
                        'edge_type':'translation'})
    print('# of translation (RNA->PROTEIN) edges:', len(trans))
    
    func_df = pd.concat((doro, omni, path, tfmirna, mirna_, trans), axis=0, ignore_index=True)

    if args.undirected: 
        print('making function graph undirected (adding reverse edges)')
        func_df2 = copy.deepcopy(func_df)
        func_df2 = func_df2.rename({'target':'source', 'source':'taret'}, axis=1)
        func_df = pd.concat((func_df, func_df2), ignore_index=True, axis=0)

    func_names = np.unique(func_df.source.tolist() + func_df.target.tolist()).tolist()

    data = pyg.data.HeteroData() 

    # can we load omics here
    _omics = {} 
    if ('methyl' in args.omics) or (args.omics is None): 
        methyl  = load_methyl(path=args.data, extpath='../extdata/') ; print('\t\tmethyl loaded.')
        _omics['methyl'] = {'df':methyl}
    if ('expr' in args.omics) or (args.omics is None): 
        expr    = load_expr(path=args.data, extpath='../extdata/', zscore=False, clip_val=10) ; print('\t\texpr loaded.')
        _omics['expr'] = {'df':expr}
    if ('cnv' in args.omics) or (args.omics is None): 
        cnv     = load_cnv(path=args.data, extpath='../extdata/') ; print('\t\tcnv loaded.')
        _omics['cnv'] = {'df':cnv}
    if ('mut' in args.omics) or (args.omics is None): 
        mut     = load_mut(path=args.data, extpath='../extdata/') ; print('\t\tmut loaded.')
        _omics['mut'] = {'df':mut}

    line_candidates = None
    for om, di in _omics.items(): 
        line_candidates = set(di['df'].index.tolist()) if line_candidates is None else line_candidates.intersection(set(di['df'].index.tolist()))
    print('# of cell line candidates (from omics):', len(line_candidates))

    if args.lines is None: 
        siginfo = pd.read_csv(f'{args.data}/siginfo_beta.txt', sep='\t', low_memory=False) 
        args.lines = list(set(siginfo.cell_iname.unique().tolist()).intersection(line_candidates))
        # need omics for this
    print('# cell lines to include:', len(args.lines))
    
    # filter targets to prot space
    targets = pd.read_csv(args.extdata + '/processed_targets.csv')

    # filter to dataset resources 
    print('DTI sources: ', args.dti_sources)
    inclusion = np.zeros((targets.shape[0]))
    if 'clue' in args.dti_sources:
        inclusion += 1.*targets.in_clue.values 
    else: 
        print('clue DTIs will not be included in prior knowledge')
    if 'targetome' in args.dti_sources:
        inclusion += 1.*targets.in_targetome.values 
    else: 
        print('targetome DTIs will not be included in prior knowledge')
    if 'stitch' in args.dti_sources:
        inclusion += 1.*targets.in_stitch.values 
    else: 
        print('stitch DTIs will not be included in prior knowledge')
    targets = targets[inclusion > 0] # select targets that are in our included datasets
    print(f'DTIs retained: {np.sum(1.*(inclusion > 0))}/{len(inclusion)}')

    targets = targets.assign(target_name = ['PROTEIN__' + x for x in targets.target])
    targets = targets[lambda x: x.target_name.isin(func_names)]
    if args.drugs is not None: 
        targets = targets[lambda x: x.pert_id.isin(args.drugs)]
    else: 
        siginfo = pd.read_csv(f'{args.data}/siginfo_beta.txt', sep='\t', low_memory=False)
        siginfo = siginfo[lambda x: (x.pert_type.isin(['trt_cp'])) 
                        & (x.qc_pass == 1.)                         # passes QC
                        & (np.isfinite(x.pert_dose.values))
                        & (x.pert_time == args.time)
                        & (x.cell_iname.isin(args.lines))]
        drugs1 = np.unique(siginfo.groupby('pert_id').count()[['sig_id']][lambda x: x.sig_id >= args.min_obs_per_drug].index.tolist())
        drugs2 = targets.pert_id.unique() 
        args.drugs = list(set(drugs1).intersection(set(drugs2)))
    print('# of drug candidates:', len(args.drugs))


    if args.lincs is None: 
        gene_info = pd.read_csv(f'{args.data}/geneinfo_beta.txt', sep='\t')
        gene2uni = get_geneid2uniprot(args)
        gene_ids = gene_info[lambda x: x.feature_space.isin(args.feature_space)].gene_id.values.tolist()
        args.lincs = [gene2uni[x] for x in gene_ids if x in gene2uni]
        print(f'# lincs outputs to include [feature space={args.feature_space}]: {len(args.lincs)}')

    ## START filter 

    # filter nodes that are not downstream of a drug AND do not have downstream LINCS genes 
    # also filter targets that are no longer relevant 
    func_names, func_df, targets, args.drugs, args.lincs = filter_func_nodes(args, func_names, func_df, targets, args.lincs, args.drugs)

    func2idx = {f:i for i,f in enumerate(func_names)}
    func_df = func_df.assign(src_idx = [func2idx[f] for f in func_df.source.values])
    func_df = func_df.assign(dst_idx = [func2idx[f] for f in func_df.target.values])

    ## END filter 

    # NOTE: Because we don't need to include an omic for every node, we can similarly filter to omics that have good variance
    omics = {}
    omic_space = []
    for omic, di in _omics.items():  
        df = di['df']
        if args.lines is not None: df = df[lambda x: x.index.isin(args.lines)]                     # filter to cellspace
        genes = df.columns[df.std(axis=0) >= np.quantile(df.std(axis=0), q=args.omics_q_filter)]   # filter low variance features
        genes = [g for g in genes if (g in [x.split('__')[1] for x in func_names])]                # filter to prot/rna space
        df = df[genes]
        omics[omic] = {'df':df, 'genes':genes}
        omic_space += [omic.upper() + '__' + g for g in genes]

    print('# of omic inputs:', len(omic_space))

    # `input` nodes 
    #  These nodes are drugs and omic features and are fixed for the optimization procedure. 
    drug_space = args.drugs
    input_names = ['DRUG__' + d for d in drug_space] + omic_space

    src=[]; dst=[]
    nde = 0 ; noe = 0 ; nce = 0
    for inp in input_names: 
        node, id = inp.split('__') 
        src_idx = input_names.index(inp)

        if node == 'DRUG': 
            targs = targets[lambda x: x.pert_id == id].target.values 
            for targ in targs: 
                dst_idx = func_names.index('PROTEIN__' + targ)
                src.append(src_idx); dst.append(dst_idx)
                nde+=1

        elif node in ['MUT', 'METHYL', 'CNV', 'EXPR']: 
            if ('RNA__' + id) in func_names: 
                dst_idx = func_names.index('RNA__' + id)
                src.append(src_idx); dst.append(dst_idx)
                noe+=1
            if ('PROTEIN__' + id) in func_names: 
                # add edges to COMPLEXES that contain the respective id 
                dst_idx = func_names.index('PROTEIN__' + id)
                src.append(src_idx); dst.append(dst_idx)
                noe+=1

            # add edges to COMPLEXES that contain the respective id  
            # inefficient but should work 
            for dst_idx, fname in enumerate(func_names): 
                if ('COMPLEX' in fname) and (id in fname): 
                    src.append(src_idx); dst.append(dst_idx)
                    noe+=1
                    nce+=1 
        else:
            raise Exception()
        
    print('# drug edges', nde)
    print('# omic edges', noe)
    print('# omic edges to protein complexes', nce)
    input_edge_index = torch.stack((torch.tensor(src, dtype=torch.long), 
                                    torch.tensor(dst, dtype=torch.long)), dim=0)

    # `function` nodes 
    # These nodes are proteins and RNAs
    # remove duplicate edges 
    nn1 = func_df.shape[0]
    func_df = func_df[['source', 'target', 'src_idx', 'dst_idx']].drop_duplicates()
    print(f'# filtered duplicate edges: {nn1 - func_df.shape[0]}')
    func_edge_index = torch.stack((torch.tensor(func_df.src_idx.values, dtype=torch.long), 
                                   torch.tensor(func_df.dst_idx.values, dtype=torch.long)), dim=0)

    # `output` nodes 
    # These are the LINCS nodes, for which we are predicting. These are also fixed for prediction. 
    # assume lincs are provided as uniprot ids 
    lincs_space = ['LINCS__' + l for l in args.lincs]
    #print('LINCS_SPACE:', lincs_space)

    src = [] ; dst = []
    for linc in lincs_space: 
        node, id = linc.split('__') 
        src_idx = func_names.index('RNA__' + id)
        dst_idx = lincs_space.index(linc)
        src.append(src_idx); dst.append(dst_idx)

    output_edge_index = torch.stack((torch.tensor(src, dtype=torch.long), 
                                     torch.tensor(dst, dtype=torch.long)), dim=0)

    # create data 
    data['edge_index_dict'] = {
        ('input',       'to',           'function')     : input_edge_index, 
        ('function',    'to',           'function')     : func_edge_index, 
        ('function',    'to',           'output')       : output_edge_index, 
    }

    data['node_names_dict'] = {'input':input_names,
                               'function':func_names,
                               'output':lincs_space}
    
    print('# `input` nodes:', len(data['node_names_dict']['input']))
    print('# `function` nodes:', len(data['node_names_dict']['function']))
    print('# `output` nodes:', len(data['node_names_dict']['output']))
    
    for key, edge_index in data['edge_index_dict'].items(): 
        print(f'# edges `{key}`: {edge_index.size(1)}')

    # create drug specific subgraphs 
    if args.create_subgraphs: 
        data.subgraph_dict = get_drug_subgraphs(args, 
                                                data.node_names_dict['input'], 
                                                data.node_names_dict['function'], 
                                                data.node_names_dict['output'], 
                                                func_df, 
                                                targets)
    
    # Now lets create the inputs and outputs 

    ## inputs first 
    ## We can simplify this process by creating omic inputs (by cell line) and drug inputs (by drug + conc)
    ### drug-conc, cell line obs can then be created by simple addition of inputs (since nodes are independent)
    ### we can also save as sparse tensors to make reading into memory faster 

    # Need this if args.lines is None
    siginfo = pd.read_csv(f'{args.data}/siginfo_beta.txt', sep='\t', low_memory=False)

    siginfo = siginfo[lambda x: (x.pert_type.isin(['trt_cp'])) 
                        & (x.qc_pass == 1.)                         # passes QC
                        & (x.pert_id.isin(args.drugs))
                        & (np.isfinite(x.pert_dose.values))
                        & (x.pert_time == args.time)
                        & (x.cell_iname.isin(args.lines))]

    data.cellspace = args.lines

    x_cell_dict = {} 
    for line in args.lines: 
        x = torch.zeros((len(input_names)), dtype=torch.float32)
        for idx, inp in enumerate(input_names): 
            node, id = inp.split('__')
            if node in ['MUT', 'METHYL', 'CNV', 'EXPR']: 
                xx = omics[node.lower()]['df'].loc[line][id]
                x[idx] = xx
        x_cell_dict[line] = x.to_sparse() 

    x_drug_dict = {} 
    # this will be more efficient then saving all unique drug concs 
    # x_drug_dict[drug](conc_um) -> x_drug_conc 
    for drug in drug_space: 
        idx = input_names.index('DRUG__' + drug)
        f = functools.partial(get_x_drug_conc, idx=idx, N=len(input_names), eps=__DOSE_EPS__)
        #f = lambda x: get_x_drug_conc(x, idx=idx, N=len(input_names))
        x_drug_dict[drug] = f

    x_dict = {'cell_dict':x_cell_dict,
              'drug_dict':x_drug_dict}
    
    data['x_dict'] = x_dict
    
    ## outputs 
    # we will create the obs_space then save each one to file. 
     
    hdf_cp            = h5py.File(args.data + '/level5_beta_trt_cp_n720216x12328.gctx')
    dataset_cp        = hdf_cp['0']['DATA']['0']['matrix']
    col_cp            = np.array(hdf_cp['0']['META']['COL']['id'][...].astype('str'))       # lincs sample ids 
    row_cp            = hdf_cp['0']['META']['ROW']['id'][...].astype(int)                   # gene ids 

    print()
    print('# obs grouped by cell line: ')
    print(siginfo.groupby('cell_iname').count()[['sig_id']].sort_values(by='sig_id', ascending=False).head(25))
    print()

    print()
    print('# obs grouped by drug: ')
    print(siginfo.groupby('pert_id').count()[['sig_id']].sort_values(by='sig_id', ascending=False).head(25))
    print()

    print()
    print('# obs grouped by dose: ')
    print(siginfo.groupby('pert_dose').count()[['sig_id']].sort_values(by='sig_id', ascending=False).head(10))
    print()

    sig_ids = np.unique(siginfo.sig_id.values)

    os.makedirs(args.out, exist_ok=True)
    torch.save(sig_ids, args.out + '/sig_ids.pt')

    # convert gene ids to uniprot 
    gene2uni = get_geneid2uniprot(args)

    print('create hdf row idx...')
    row_idxs = []
    for i,gid in enumerate(row_cp): 
        if gid in gene2uni: 
            uid = gene2uni[gid]
            if ("LINCS__" + uid) in lincs_space: 
                row_idxs.append(i)
    row_idxs = np.array(row_idxs).ravel()

    assert len(row_idxs) == len(lincs_space), 'the lincs hdf row idxs have a different number of items as the provided lincs space; probably error with geneid -> uniprot conversion'

    print('create hdf col idxs...')
    sigid2idx = {sid:i for i,sid in enumerate(col_cp)}
    col_idxs = np.array([sigid2idx[sid] for sid in sig_ids]).ravel()

    # will be ordered as (sig_ids, lincs_space)
    print('loading hdf to memory...')
    dataset = dataset_cp[col_idxs, :][:, row_idxs]

    print('LINCS/OUTPUT means:', dataset.mean(axis=0))
    print('LINCS/OUTPUT stds:', dataset.std(axis=0))

    print('saving obs to disk...')
    os.makedirs(args.out + '/obs/', exist_ok=True)
    for i, (sig_id, y) in enumerate(zip(sig_ids, dataset)): 
        print(f'progress: {i}/{len(sig_ids)}', end='\r')
        y = torch.tensor(y, dtype=torch.float32)
        torch.save(y, args.out + '/obs/' + sig_id + '.pt') 
    print('# LINCS observations:', i+1)
    
    print('saving data object...')
    torch.save(data, args.out + '/data.pt')


    '''
    ##########################################################################################
    ##########################################################################################
    ####################                    PRISM                         ####################
    ##########################################################################################
    ##########################################################################################
     # redo this with new node indexing 
    print('making PRISM data...')

    prism = utils.load_prism(args.data, cellspace=data.cellspace, drugspace=data.drugspace)

    if os.path.exists(f'{args.out}/obs_prism/'): shutil.rmtree(f'{args.out}/obs_prism/')
    os.mkdir(f'{args.out}/obs_prism/')

    for i, row in prism.iterrows(): 
        if i%10 == 0: print(f'progress: {i}/{len(prism)}', end='\r')

        obsp = row2obs_prism(row, data, meta, omics, eps=args.dose_trans_eps)

        torch.save(obsp, f'{args.out}/obs_prism/{obsp["sig_id"]}.pt')

    np.save(args.out + '/prism_ids', prism.sig_id.values, allow_pickle=True)

    print('PRISM data made. ')
    '''


    with open(f'{args.out}/make_data_completed_successfully.flag', 'w') as f: f.write(':)')


